#!/bin/bash
#
# Copyright (C) 2005-2008 by John P. Weiss
#
# This package is free software; you can redistribute it and/or modify
# it under the terms of the Artistic License, included as the file
# "LICENSE" in the source code archive.
#
# This package is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# You should have received a copy of the file "LICENSE", containing
# the License John Weiss originally placed this program under.
#
# RCS $Id$
############


############
#
# Configuration Variables
#
############


# Instructions:
# 
# - Set variables whose value you want to customize
# - If you want to use the default value of a variable, leave it unset or set
#   it to "".


# List of devices or mountpoints to umount.
# 
# A list of directories or device files to umount prior to suspend.
# 
# None of the umount'ed devices will be remounted on resume.  The whole point
# of this feature is to get rid of devices which are removable, since they may
# not be attached on resume.
#
# Each filesystem in the list is umount'ed in the order specified.  To
# bulk-umount all of the subdirectories in a directory, append "/*" to the end
# of the directory.
#
# Because of its association with hotplug, the "/media/*" directory will
# always be preprended to the list of devices and mountpoints that you
# specify.  Even if you specify nothing, "/media/*" is still checked for
# mounted devices.
# 
# Default: /media/*
#
REMOVABLE_DEVICES="/mnt/*"

# List of modules that are ill-behaved under any form of suspend.
# 
# These modules will be removed (via rmmod) before mem/disk suspend, in the
# order listed below.  Then, after the resume, each module that was
# successfully removed will be reinstalled.  The reinstall order is the
# reverse of the removal order, thereby properly accounting for module
# dependencies.
#
# YOU MUST include interdependent modules in this list!
# If you remove module "xyz", anything that depends on "xyz" MUST be in this
# list, before "xyz".
#
# Notes:
# 1. You only need to add your own module removal/reinstall code if you
#    require more complex control over the module settings or dependencies.
#    Otherwise, this built-in mechanism, combined with the `MODULES_TO_REMOVE'
#    feature (below), should suffice.
# 2. If you need to stop any services before any of the modules in this list
#    can be removed, do that in the "pre_suspend()" function, below.
#    It's up to you to customize "pre_suspend()".  Only you know your needs.
# 3. Similarly, if you want to restart any services after any of the modules
#    in this list are reloaded, do that in the "resume_tasks()" function,
#    below.
#    It's up to you to customize "resume_tasks()".  Only you know your needs.
# 
# Default: None.  An empty list means do nothing.
#
ILL_BEHAVED_MODULES="sdhci mmc_block mmc_core"
##ILL_BEHAVED_MODULES="$ILL_BEHAVED_MODULES tpm_atmel tpm tpm_bios"
##ILL_BEHAVED_MODULES="$ILL_BEHAVED_MODULES iTCO_wdt iTCO_vendor_support"
##ILL_BEHAVED_MODULES="$ILL_BEHAVED_MODULES i2c_i801 i2c_core"
##ILL_BEHAVED_MODULES="ehci_hcd uhci_hcd mmc_block sdhci mmc_core"
##ILL_BEHAVED_MODULES="uhci_hcd ipw2200 firmware_class"

# List of modules to remove before suspend and not restore on resume.
# 
# These modules will be removed (via rmmod) before mem/disk suspend, in the
# order listed below.  However, unlike the `ILL_BEHAVED_MODULES' list, they
# will not be restored after the resume.
#
# YOU MUST include interdependent modules in this list!
# If you remove module "xyz", anything that depends on "xyz" MUST be in this
# list, before "xyz".
#
# Note:
# See the notes for `ILL_BEHAVED_MODULES'; all but #3 (which regards resuming)
# apply to this feature.
# 
# Removal order:
# + First, modules in `MODULES_TO_REMOVE', in the order you specify.
# + Next, the modules in `ILL_BEHAVED_MODULES', in the order you specify.
#
# DO NOT split interdependent modules between this list and
# `ILL_BEHAVED_MODULES'.
# 
# Default: None.  An empty list means do nothing.
#
WIFI_MODULES="ipw2200 ieee80211_crypt_wep ieee80211_crypt_tkip"
WIFI_MODULES="$WIFI_MODULES ieee80211_crypt_ccmp ieee80211_crypt"
MODULES_TO_REMOVE="e1000 ${WIFI_MODULES} pcmcia firmware_class"
MODULES_TO_REMOVE="${MODULES_TO_REMOVE} tpm_atmel tpm tpm_bios"
#MODULES_TO_REMOVE="${MODULES_TO_REMOVE} i2c_i801 i2c_core"
#MODULES_TO_REMOVE="$MODULES_TO_REMOVE iTCO_wdt iTCO_vendor_support"

# The partition to hibernate into.
#
# Under PMDISK_SUPPORT='y' (see below), this variable is the swap partition
# you'd like to use as the hibernation disk.  "suspenders.sh" then tries
# several things to make PMDisk choose this partition as its hibernation disk.
#
# For SWSusp, this setting is required.  It is the name of the swap partition
# you specified at compile time or via the "resume=" kernel parameter.
# 
# In either case, "suspenders.sh" will enable this partition if it isn't
# already active.
# 
# You MUST set this variable, or "suspenders.sh" will do nothing.
# 
# Default: *none* -  MUST be set!
#
SUSPEND_PARTITION="/dev/sda3"

# There were, at one time, two forms of the built-in kernel suspend feature,
# SWSusp, and its forked cousin, PMDisk.  The former forces you to specify
# which swap partition is the hibernation partition.  PMDisk, however, did
# not.  It used the first empty, active partition that it could find.
#"suspenders.sh" tried to remedy that.
#
# Those days, however, are gone.  SWSusp is all that remains in newer 2.6
# kernels.
#
# If you happen to be using one of the earlier 2.6 kernels (up to 2.6.9), you
# may still have PMDisk available.  On some hardware, PMDisk may be the only
# form of software hibernation that works for you.  (HP Pavillion laptops are
# on that list.)  Or perhaps you just like PMDisk better.
#
# Set this variable to any non-empty string to enable "suspenders.sh" PMDisk
# support.  "suspenders.sh" will close all swap partitions, stopping only if
# memory is full, then activate the hibernation partition (see below).  This
# is in an attempt to encourage PMDisk to use the right partition.
#
# If, however, you want PMDisk to choose whichever partition is available,
# then keep this setting disabled and make sure to set "SUSPEND_PARTITION"
# (below) to any swap partition that is always active.
#
# Default: ""
#
PMDISK_SUPPORT=''

# When initiating mem/disk suspend from within X, first switch to this virtual
# console.  Upon resume, you will be switched back to the console running X.
# When you hibernate from a virtual console, no switching takes place.  The
# default should be fine for most people.
#
# Default: 8
#
SWITCH_TO_CONSOLE=""

# This setting works in concert with "SWITCH_TO_CONSOLE":  Before switching
# back to the console running X, pause for this number of seconds.  The pause
# gives X time to start running again after resume and do any automatic
# resets it needs.
#
# Default: 2
#
RETURN_TO_X_PAUSE=""

# This setting works in concert with "SWITCH_TO_CONSOLE", but you will seldom
# need to touch it.  This is the virtual console on which X runs on your
# system.  For all stock Linux systems, this will be virtual console #7.  You
# only need to change this if you have a custom setup and run X on a different
# console.
#
# Default: 7
#
X_CONSOLE=""

# The Log File.  (The default will be fine for most people.)
#
# The suspend script will print a copy of all of its screen messages (as well
# as error messages not output to the scrren) to this file.
#
# Default: "/tmp/suspend2any.log"
#
LOGFILE=""

# The Lock File.  (The default will be fine for most people.)
# 
# Prevents the suspend script from running multiple instances at the same
# time.  Without it, you will enter into a VERY annoying
# suspend-resume-resuspend-reresume-reresuspend-... loop.
#
# Default: "/tmp/.suspenders.lock"
#
LOCKFILE=""

# How long to wait before removing the lockfile.
# 
# Depending on your ACPI handler and how it's configured, it may "queue
# keys".  Hitting that special "Hibernate" key on your laptop more than once
# may cause a suspend-resume-resuspend-reresume-... loop.
#
# Or it would, if we removed the lockfile immediately.
#
# This is a delay, in seconds, to sleep before removing the lockfile.  The
# sleep and the "rm" will run in the background, after the suspend script
# exits.
#
# Default: 120 sec.
#
REMOVE_LOCKFILE_AFTER=120

# The Lock Cleanup Control File.  (The default will be fine for most people.)
# 
# Forces the suspend script to "clean up" any existing copy of its lockfile.
# 
# Specifically, if this file exists, the suspend script will forcibly remove
# its lockfile and continue running.  This feature permits regular users to
# clean up dead lockfiles that may be blocking all further suspend attempts.
# Ordinarily, you'd need to be root to clean up dead lockfiles (since the user
# running the suspend script --- typically "root" --- owns the lockfile).
# 
# Default: "/tmp/suspenders.force-lock-cleanup"
#
FORCE_LOCKFILE_CLEANUP=""


############
#
# Global Variables:
# Set to Taste
#
############


# MY_VAR="foo"


############
#
# Functions
#
############


stop_NetworkManager() {
    /sbin/service NetworkManagerDispatcher stop
    /sbin/service NetworkManager stop
    hungNMpid=`pgrep NetworkManager`
    if [ -n "$hungNMpid" ]; then
        echo "Forcibly killing NetworkManager..."
        killall -9 NetworkManager
    fi
}


forciblyRemoveWifi() {
    killall -q -9 mii-tool
    killall -q -9 knetworkmanager
    if [ -e /etc/acpi/actions/wifiPower.sh ]; then
        touch /tmp/force-wifi-off
        /etc/acpi/actions/wifiPower.sh
    fi
    /bin/sleep 0.1s
    ndev=eth1
    if [ -e /sys/class/net/$ndev ]; then
        /sbin/ifdown $ndev >/dev/null 2>&1
    fi
    /bin/sleep 0.3s
    modprobe -r -q ${WIFI_MODULES} #>/dev/null 2>&1
}


# Your pre-hibernation tasks.
#
# This is the entry-point for all your pre-hibernation tasks.  It is called
# *after* switching from X to another virtual console, but before any other
# suspend preparation tasks.
#
# Things you won't need to do here:
# - Switch from X to another console;
# - Disable "xscreensaver";
# - "rmmod" any modules listed in the $ILL_BEHAVED_MODULES configuration
#    variable;
# 
# Feel free to add other functions and call them from here.
#
pre_suspend() {
    # The first argument to this function indicates whether or not we switched
    # consoles from X.  It will be '0' if we were, and '1' if not.
    was_in_x=$1
    shift

    # The second argument is how the suspend script was called.  Will be one
    # of 'mem' or 'disk'.
    how=$1
    shift

    # Close all networking devices (and sync beforehand).
    /bin/sync
    forciblyRemoveWifi
    for ndev in eth0 eth1; do
        if [ -e /sys/class/net/$ndev ]; then
            /sbin/ifdown $ndev >/dev/null 2>&1
        fi
    done

    /bin/sync
#    /sbin/service pcmcia stop

    # Things to do for suspend-to-disk only
    if [ "$how" = "disk" ]; then
        # Start by disabling "laptop-mode" ... it can cause suspend-to-disk to
        # hang, ESPECIALLY if you've configured it to tweak IDE or drive
        # device settings.
        /bin/sync
        /sbin/service laptop-mode stop
    fi

    # Sync
    /bin/sync
}


# Your post-hibernation tasks.
#
# This is the entry-point for all your resume tasks.  It is called after all
# other resume tasks, *except* switching back to X.  If you were in X before
# hibernation, then you'll be switched back to X after this function
# completes.
# 
# Things you won't need to do here:
# - Switch back to X from another virtual console;
# - Re-enable "xscreensaver";
# - "modprobe" any modules listed in the $ILL_BEHAVED_MODULES configuration
#    variable;
# - Reset the system clock.
#
# Feel free to add other functions and call them from here.
#
resume_tasks() {
    # The first argument to this function indicates whether or not we switched
    # consoles from X.  It will be '0' if we were, and '1' if not.
    was_in_x=$1
    shift

    # The second argument is how the suspend script was called.  Will be one
    # of 'mem' or 'disk'.
    how=$1
    shift

    # This builds the /tmp/.init.env file and performs certain other tasks.
    if [ -x /etc/rc.d/rc.kernel_cmdline ]; then
        rm -f /tmp/.init.env 2>/dev/null
        /etc/rc.d/rc.kernel_cmdline --resume --keeplog
    fi

    # Pull in the ThinkPad twiddling Tools
    source /etc/rc.d/thinkpadSetup.sh

    enableThinkPadLCD
    /sbin/setsysfont
    activate_TrackPoint resume


    # Lastly, re-enable some services on a resume-from-disk.  However, do so
    # only if we did so on boot.
    if [ "$how" = "disk" ]; then
        for svc in laptop-mode; do
            if [ -f /etc/rc${RUNLEVEL:-3}.d/S*${svc} ]; then
                /sbin/service ${svc} start
            fi
        done

        if [ "$RUNLEVEL" != 4 ]; then 
            for svc in NetworkManager NetworkManagerDispatcher; do
                if [ -f /etc/rc${RUNLEVEL}.d/S*${svc} ]; then
                    /sbin/service ${svc} start
                fi
            done
        fi
    fi

    # Some extra things to shut down/remove to save power.
    if [ "$RUNLEVEL" = 4 ]; then 
        forciblyRemoveWifi
        #modprobe -r -q eth1000
        PCMCIA_MODULES="yenta_socket rsrc_nonstatic pcmcia_core"
        modprobe -r -q ${PCMCIA_MODULES} #>/dev/null 2>&1
    fi
}


############
#
# Main
#
############


# DO NOT CHANGE ANYTHING BELOW
# NO USER-SERVICABLE PARTS


case "$1" in
    start) 
        shift
        pre_suspend "$@"
        ;;
    stop)
        shift
        resume_tasks "$@"
        ;;
esac


#################
#
#  End

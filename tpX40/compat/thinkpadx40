// [jpw]  The keyboard mappings for the ThinkPad X40.
//    This file should be named "thinkpadx40"


// The ThinkPad has no separate keypad keys.  By default, when NumLock
// is active, the overlayed keypad keys generate the bona-fide keypad
// number-keycodes.  Even better, Shift a keypad key generates the
// actual motion-keypad keycodes!  :)  Therefore, there is no reason
// to alter the default X behavior.

// Indeed, the only things that need altering for a ThinkPad are:
//   1. Get rid of Shift+NumLock being bound to ANYTHING.
//
//      When you press any "normal" keyboard key, it generates a
//      scancode (keycode in X-parlance).  That includes the Shift,
//      Ctrl, and Alt keys.
//      So, on a ThinkPad, Shift+ScrollLock generates the *hardware*
//      keycodes of NumLock *and* Shift.  There is NO unshifted
//      NumLock.
//
//   2. Enabling NumLock by default when starting X.
//
//      For a desktop keyboard, this is fine.  For a laptop, it's
//      pointless.  For the ThinkPads, it's both pointless AND
//      annoying!


//=============================================================================
//  Compatibility
//
//  which should really be known as "Actions"
//=============================================================================


// Actions for the special ThinkPad keys.
//
// These are the defaults.


default partial
xkb_compatibility "default" {
    virtual_modifiers NumLock,Super,Hyper;

    // Disable repeat for the Super_* keys.
    // FIXME:  Well, in theory, it should.  At the moment, it doesn't
    //         (for some unknown reason).  :P
    //
    interpret.repeat = False;

    // Define the Super_* modifier keys.
    interpret Super_L+Any {
        virtualModifier = Super;
        action = LatchMods(modifiers=modMapMods);
    };

    interpret Super_L {
        virtualModifier = Super;
        action = LatchMods(modifiers=modMapMods);
    };

    interpret Super_R+AnyOfOrNone(Shift) {
        action = SetMods(modifiers=Super);
    };

    interpret Super_R+Any {
        virtualModifier = Super;
        action = SetMods(modifiers=modMapMods);
    };

    // Define the Hyper_L modifier key.
    interpret Hyper_L+Any {
        virtualModifier = Hyper;
        action = LatchMods(modifiers=modMapMods);
    };

    interpret Hyper_L {
        virtualModifier = Hyper;
        action = LatchMods(modifiers=modMapMods);
    };


    // Fix NumLock so it can be disabled at X startup.
    //
    // A ThinkPad keyboard has no independent keypad keys.  So
    // enabling NumLock at startup just creates confusion.
    //
    // For KDE,  you should also disable NumLock on startup in KDE's
    // Peripherals->Keyboard Control Panel.
    //
    indicator "Num Lock" {
        allowExplicit;
        drivesKeyboard;
        whichModState = Locked;
        modifiers = NumLock;
    };
};


// Alter the Mousekeys so that the 'KP_<number>' symbols _do_ _not_
// move the mouse or produce button events.  Similarly, 
//

partial
xkb_compatibility "mousekeys" {
    interpret.repeat= True;

    // Forcibly disable actions on the numbers and '.' keypad-mode keys.

    interpret KP_0 { action = NoAction(); };
    interpret KP_1 { action = NoAction(); };
    interpret KP_2 { action = NoAction(); };
    interpret KP_3 { action = NoAction(); };
    interpret KP_4 { action = NoAction(); };
    interpret KP_5 { action = NoAction(); };
    interpret KP_6 { action = NoAction(); };
    interpret KP_7 { action = NoAction(); };
    interpret KP_8 { action = NoAction(); };
    interpret KP_9 { action = NoAction(); };
    interpret KP_Decimal { action = NoAction(); };


    // Define the keypad-mode motion keys as usual


    interpret KP_End { 
        action = MovePtr(x=-1,y= +1); 
    };

    interpret KP_Down { 
        action = MovePtr(x=+0,y= +1); 
    };

    interpret KP_Next { 
        action = MovePtr(x=+1,y=+1); 
    };

    interpret KP_Left { 
        action = MovePtr(x=-1,y=+0); 
    };

    interpret KP_Right { 
        action = MovePtr(x=+1,y=+0); 
    };

    interpret KP_Home { 
        action = MovePtr(x=-1,y=-1); 
    };

    interpret KP_Up { 
        action = MovePtr(x=+0,y=-1); 
    };

    interpret KP_Prior { 
        action = MovePtr(x=+1,y=-1); 
    };

    interpret KP_Begin { 
        action = PointerButton(button=default); 
    };

    interpret KP_Divide { 
        action = SetPtrDflt(affect=defaultButton,button=1); 
    };

    interpret KP_Multiply { 
        action = SetPtrDflt(affect=defaultButton,button=2); 
    };

    interpret KP_Subtract { 
        action = SetPtrDflt(affect=defaultButton,button=3); 
    };

    interpret KP_Add { 
        action = PointerButton(button=default,count=2);
    };

    interpret KP_Insert { 
        action = LockPointerButton(button=default,affect=lock); 
    };

    interpret KP_Delete { 
        action = LockPointerButton(button=default,affect=unlock); 
    };

    interpret.repeat= False;


    // New Keysym Actions.
    //
    interpret Pointer_Button_Dflt {
        action= PointerButton(button=default);
    };
    interpret Pointer_Button1 {
        action= PointerButton(button=1);
    };
    interpret Pointer_Button2 {
        action= PointerButton(button=2);
    };
    interpret Pointer_Button3 {
        action= PointerButton(button=3);
    };
    interpret Pointer_DblClick_Dflt {
        action= PointerButton(button=default,count=2);
    };
    interpret Pointer_DblClick1 {
        action= PointerButton(button=1,count=2);
    };
    interpret Pointer_DblClick2 {
        action= PointerButton(button=2,count=2);
    };
    interpret Pointer_DblClick3 {
        action= PointerButton(button=3,count=2);
    };
    interpret Pointer_Drag_Dflt {
        action= LockPointerButton(button=default);
    };
    interpret Pointer_Drag1 {
        action= LockPointerButton(button=1);
    };
    interpret Pointer_Drag2 {
        action= LockPointerButton(button=2);
    };
    interpret Pointer_Drag3 {
        action= LockPointerButton(button=3);
    };

    interpret Pointer_EnableKeys {
        action= LockControls(controls=MouseKeys);
    };
    interpret Pointer_Accelerate {
        action= LockControls(controls=MouseKeysAccel);
    };
    interpret Pointer_DfltBtnNext {
        action= SetPtrDflt(affect=defaultButton,button= +1);
    };
    interpret Pointer_DfltBtnPrev {
        action= SetPtrDflt(affect=defaultButton,button= -1);
    };

    //
    // Bind the ThinkPadX40 Page-Back & Page-Forward keys to the mouse
    // wheel buttons.
    //

    interpret XF86ScrollUp {
        action = PointerButton(button=4);
    };
    interpret XF86ScrollDown {
        action = PointerButton(button=5);
    };


    // Allow an indicator for MouseKeys.
    indicator "Mouse Keys" {
        indicatorDrivesKeyboard;
        controls= MouseKeys;
    };
};
